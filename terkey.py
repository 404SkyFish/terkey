import base64
exec(base64.b64decode('aW1wb3J0IG9zDQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwDQpmcm9tIHRocmVhZGluZyBpbXBvcnQgVGhyZWFkIGFzIHRkDQoNCg0KYSA9J1wwMzNbOTJtJw0KYiA9J1wwMzNbOTFtJw0KYyA9J1wwMzNbMG0nDQoNCmNsYXNzIFRlcmtleToNCiAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgIHBhc3MNCiAgDQogICMgQmFubmVyDQogIGRlZiBiYW5uZXIoc2VsZik6DQogICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgIHByaW50KGYne2N9VGVya2V5IHthfVt7Y31UZXJtdXggS2V5e2F9XScuY2VudGVyKDY4KSkNCiAgICAgIHByaW50KGYne2F9U2t5RmlzaCcuY2VudGVyKDUzKSkNCiAgICAgIHByaW50KCIiLmpvaW4oW2kgZm9yIGkgaW4gIlxuIiozXSkpDQogICAgICANCiAgIyBMb2FkaW5nIGFuaW1hdGlvbiAgIA0KICBkZWYgYW5pbWF0ZShzZWxmLHBhcmFtcyk6DQogICAgc2VsZi5iYW5uZXIoKQ0KICAgIHByaW50KGYie2N9U2V0dGluZyB1cCB5b3VyIGtleXMuLiIpDQogICAgdCA9IHRkKHRhcmdldD1zZWxmLnNldHVwLGFyZ3M9KHBhcmFtcywpKQ0KICAgIHQuc3RhcnQoKQ0KICAgIHdoaWxlIHQuaXNfYWxpdmUoKToNCiAgICAgICAgICBmb3IgaSBpbiAiLVx8Ly1cfC8iOg0KICAgICAgICAgICAgICBwcmludChmJ1xye2N9UGxlYXNlIHdhaXQge2F9e2l9ICcsZW5kPSIiLGZsdXNoPVRydWUpDQogICAgICAgICAgICAgIHNsZWVwKDAuMSkNCiAgICBwcmludChmIlxuRE9ORSAhXG5cbntjfVBsZWFzZSBydW4gYWdhaW4gdGhpcyB0b29sIGFuZCBzZWxlY3Qge2F9QWJvdXR7Y30gbWVudVxuZm9yIG1vcmUgaW5mb3JtYXRvbnNcblRoYW5rcyAhIikNCiAgICAgICAgICAgICAgDQogICMgT2YgY291cnNlLCBsaWtlIGl0IG5hbWUsIHBhZ2luYXRlICENCiAgZGVmIHBhZ2luYXRlKHNlbGYsZGF0YSxuKToNCiAgICBuX2RhdGEgPSByb3VuZChsZW4oZGF0YSkvbikgKyAxDQogICAgbmV3X2RhdGFfcGFydCA9IFtdDQogICAgYmF0YXMgPSAwDQogICAgZm9yIGkgaW4gcmFuZ2Uobl9kYXRhKToNCiAgICAgIG5ld19kYXRhID0gW10NCiAgICAgIGZvciB4IGluIHJhbmdlKGJhdGFzLG4rYmF0YXMpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgbmV3X2RhdGEuYXBwZW5kKGRhdGFbeF0pDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICBwYXNzDQogICAgICAgIGJhdGFzICs9IDENCiAgICAgIGlmIG5ld19kYXRhOiBuZXdfZGF0YV9wYXJ0LmFwcGVuZChuZXdfZGF0YSkNCiAgICByZXR1cm4gbmV3X2RhdGFfcGFydA0KICAgIA0KICAjIHNldHRpbmcgdXAgdGhlIHNlbGVjdGVkIGtleXMNCiAgZGVmIHNldHVwKHNlbGYsa2V5cyk6DQogICAgICBrZXlzID0gZiJleHRyYS1rZXlzID0ge2tleXN9Ig0KICAgICAgdHJ5Og0KICAgICAgICAgIG9zLm1rZGlyKCcvZGF0YS9kYXRhL2NvbS50ZXJtdXgvZmlsZXMvaG9tZS8udGVybXV4JykNCiAgICAgIGV4Y2VwdDoNCiAgICAgICAgICBwYXNzDQogICAgICBvcGVuKCcvZGF0YS9kYXRhL2NvbS50ZXJtdXgvZmlsZXMvaG9tZS8udGVybXV4L3Rlcm11eC5wcm9wZXJ0aWVzJywndycpLndyaXRlKGtleXMpDQogICAgICBvcy5zeXN0ZW0oJ3Rlcm11eC1yZWxvYWQtc2V0dGluZ3MnKQ0KICAgICAgDQogICMgSWYgeW91IGNob29zZSBkZWZhdWx0IGtleXMsIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZC4NCiAgZGVmIHN0YW5kYXIoc2VsZik6DQogICAga2V5ID0gIltbJ0VTQycsJy8nLCctJywnSE9NRScsJ1VQJywnRU5EJywnUEdVUCddLFsnVEFCJywnQ1RSTCcsJ0FMVCcsJ0xFRlQnLCdET1dOJywnUklHSFQnLCdQR0ROJ11dIg0KICAgIHJldHVybiBrZXkNCiAgDQogIGRlZiBhYm91dChzZWxmKToNCiAgICBzZWxmLmJhbm5lcigpDQogICAgcHJpbnQoZiIiIg0KICAgIHthfVcgRSBMIEMgTyBNIEUgICF7Y30NCiAgICANCiAgICBUaGlzIGlzIFRlcmtleSwgeWVhaCwgVGVybXV4IEtleSAhDQogICAgQSBwcm9ncmFtIGZyb20ge2F9S2Fyam9rIFBhbmdlc3R5e2N9IGZvciB5b3UuDQogICAgVGhpcyB0b29sIGlzIG9ubHkgZm9yIFRlcm11eCBhcHAgYW5kIGFic29sdXRlbHkgRlJFRSAhDQogICAgDQogICAgWW91IGNhbiBmaW5kIGFsbCBkZWZhdWx0IGtleXMgaW4gdGhpcyBwcm9ncmFtIGF0DQogICAge2F9aHR0cHM6Ly93aWtpLnRlcm11eC5jb20vd2lraS9Ub3VjaF9LZXlib2FyZHtjfQ0KICAgIA0KICAgIFdhbnQgdG8gY2hhdCB3aXRoIG1lID8NCiAgICB7YX1odHRwczovL3QubWUvU2t5RmlzaDQwNHtjfQ0KICAgIA0KICAgICIiIg0KICAgICkNCiAgIyBBbmQgaWYgeW91IHNlbGVjdCBjdXN0b20ga2V5cywNCiAgZGVmIGN1c3RvbShzZWxmKToNCiAgICBpbmRleCA9IDENCiAgICBsYXN0aW5kZXggPSAwDQogICAga2V5cyA9IFsiQ1RSTCIsIkFMVCIsIkZOIiwiU1BBQ0UiLCJFU0MiLCJUQUIiLCJIT01FIiwiRU5EIiwiUEdVUCIsIlBHRE4iLCJJTlMiLCJERUwiLCJCS1NQIiwiVVAiLCJMRUZUIiwiUklHSFQiLCJET1dOIiwiRU5URVIiLCJCQUNLU0xBU0giLCJRVU9URSIsIkFQT1NUUk9QSEUiLCJGMSIsIkYyIiwiRjMiLCJGNCIsIkY1IiwiRjYiLCJGNyIsIkY4IiwiRjkiLCJGMTAiLCJGMTEiLCJGMTIiLCJLRVlCT0FSRCIsIkRSQVdFUiJdDQogICAgcHJpbnQoZiJ7YX0gLS0rIHtjfURlZmF1bHQgS2V5IExpc3RzIHthfSstLSIuY2VudGVyKDYyKSkNCiAgICBwcmludCgpDQogICAgZm9yIGkgaW4gc2VsZi5wYWdpbmF0ZShbKmVudW1lcmF0ZShrZXlzKV0sNCk6DQogICAgICBmb3IgeCBpbiBpOg0KICAgICAgICBlbiA9ICIgIiAqICgxNSAtIGxlbigiLiAiLmpvaW4oW3N0cih4WzBdKzEpLHhbMV1dKSkpDQogICAgICAgIHByaW50KGYie2F9e3hbMF0rMX0ue2N9IHt4WzFdfSIsZW5kPWVuKQ0KICAgICAgcHJpbnQoKQ0KICAgIHByaW50KGYie2N9XG5JbnB1dCB5b3VyIHNlbGVjdGVkIGtleSBudW1iZXIgXG5hbmQgc3BhcmF0ZSBpdCBieSBjb21tYSAoLCkge2F9ZXg6IDEsMiwzLDR7Y31cbk9yIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBrZXkgXG5saWtlIHthfTEsMiwzLCgsKSwqLDwsPntjfSBldGMuIikNCiAgICANCiAgICBzZWxlY3RlZF9rZXlzID0gW10NCiAgICB1c2VyX3NlbGVjdCA9IGlucHV0KGYiXG57YX1JbnB1dCB7Y306ICIpDQogICAgcmFuZ2VzID0gW3N0cihpKzEpIGZvciBpIGluIHJhbmdlKGxlbihrZXlzKSldDQogICAgZm9yIGkgaW4gdXNlcl9zZWxlY3Quc3BsaXQoIiwiKToNCiAgICAgIGlmIGkuaXNkaWdpdCgpIGFuZCBpIGluIHJhbmdlczoNCiAgICAgICAgc2VsZWN0ZWRfa2V5cy5hcHBlbmQoa2V5c1tpbnQoaSktMV0pDQogICAgICBlbHNlOg0KICAgICAgICBzZWxlY3RlZF9rZXlzLmFwcGVuZChpKQ0KICAgIHJldHVybiBzZWxlY3RlZF9rZXlzDQogICAgDQogICMgTWFpbg0KICBkZWYgc3RhcnQoc2VsZik6DQogICAgc2VsZi5iYW5uZXIoKQ0KICAgIHByaW50KGYiICAgIHthfVsge2N9TUVOVSB7YX1dIikNCiAgICBwcmludChmIiIiDQogIHthfTEue2N9IFVzZSBEZWZhdWx0IEtleXMNCiAge2F9Mi57Y30gQ3VzdG9tIEtleXMNCiAge2F9My57Y30gQWJvdXQNCiAgICAiIiINCiAgICApDQogICAgbWVudSA9IGlucHV0KGYiICB7Y30+e2F9ICIpDQogICAgaWYgbWVudSA9PSAiMSI6DQogICAgICBzZWxmLmJhbm5lcigpDQogICAgICBrZXkgPSBzZWxmLnN0YW5kYXIoKQ0KICAgICAgc2VsZi5hbmltYXRlKGtleSkNCiAgICBlbGlmIG1lbnUgPT0gIjIiOg0KICAgICAgc2VsZi5iYW5uZXIoKQ0KICAgICAga2V5ID0gc2VsZi5jdXN0b20oKQ0KICAgICAga2V5cyA9IHNlbGYucGFnaW5hdGUoa2V5LDcpDQogICAgICBwcmludChmIntjfVxuU2VsZWN0ZWQga2V5czoge2F9eycsJy5qb2luKGtleSl9e2N9XG5BcmUgeW91IHN1cmUgPyIpDQogICAgICB0cnk6DQogICAgICAgIGlucHV0KGYie2N9UHJlc3MgZW50ZXIgdG8gY29udGludWUgb3IgQ1RSTCArIEMgdG8gY2FuY2VsICIpDQogICAgICAgIHNlbGYuYW5pbWF0ZShrZXlzKQ0KICAgICAgI3NlbGYuZmluaXNoKCkNCiAgICAgIGV4Y2VwdDoNCiAgICAgICAgZXhpdChmIntifUNhbmNlbGVkIXtjfSIpDQogICAgZWxpZiBtZW51ID09ICIzIjoNCiAgICAgIHNlbGYuYWJvdXQoKQ0KICAgIGVsc2U6DQogICAgICBwYXNzDQogICAgI3ByaW50KGMrJ1NpbGFoa2FuIGh1YnVuZ2kgJythKydodHRwczovL3QubWUvU2t5RmlzaDQwNCcrYysnIGppa2EgYWRhIHlhbmcgbWF1IGRpIGJpY2FyYWthbiB0ZXJrYWl0IHRvb2wgaW5pLCBiaXNuaXMgYXRhdSBzZWtlZGFyIGJlcnRhbnlhIGthYmFyLiA6dlxuVGVyaW1ha2FzaWggXl9eJykNCmlmIF9fbmFtZV9fPT0nX19tYWluX18nOg0KICB0ZXJrZXkgPSBUZXJrZXkoKQ0KICB0ZXJrZXkuc3RhcnQoKQ0KIyBpbmkgY3VtYSBzaG9ydGN1dA0KIyBTa3lGaXNo'))